{"version":3,"sources":["utils/utils.js","Components/InfoBox/InfoBox.js","Components/Map/Map.js","Components/Table/Table.js","Components/LineGraph/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","sortedData","data","sort","a","b","prettyPrint","stat","numeral","format","InfoBox","title","total","isRed","active","onClick","Card","className","CardContent","Typography","color","Map","mapCountries","casesType","center","zoom","TileLayer","url","attribution","map","country","index","Circle","key","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","drawCircles","Table","countries","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","buildChartData","lastDatapoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","graphData","setGraphData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setMapCountries","setCasesType","countriesData","name","iso3","sortData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.91f26df1.chunk.js","sourcesContent":["import React from 'react'\r\nimport numeral from 'numeral'\r\nimport { Circle, Popup } from 'react-leaflet'\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\n//sort data by cases for Table\r\nexport const sortedData = (data) => {\r\n    const sortData = [...data];\r\n    return sortData.sort((a, b) => a.cases < b.cases ? 1 : -1)\r\n}\r\n\r\n// print cases formatted using numeral in Infobox\r\nexport const prettyPrint = (stat) =>\r\n    stat ? `+${numeral(stat).format('0.0a')}` : '+0';\r\n\r\n//method to draw circles in Mao\r\nexport const drawCircles = (data, casesType = 'cases') => (\r\n    data.map((country, index) => (\r\n        <Circle\r\n            key={index}\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n        >\r\n            <Popup>\r\n                <div className='info-container'>\r\n                    <div className='info-flag' style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n                    <div className='info-country'>{country.country}</div>\r\n                    <div className='info-cases'>Cases:{numeral(country.cases).format('0,0s')}</div>\r\n                    <div className='info-recovered'>Recovered:{numeral(country.recovered).format('0,0')}</div>\r\n                    <div className='info-deaths'>Deaths:{numeral(country.deaths).format('0,0')}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);","import React from 'react'\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n} from '@material-ui/core'\r\nimport './InfoBox.css'\r\nimport { prettyPrint } from '../../utils/utils'\r\n\r\nfunction InfoBox({ title, cases, total, isRed, active, onClick }) { // destructuring {props object destructed to get keys title,cases,total}\r\n    return (\r\n        <Card className={`infoBox ${active && \"infoBox--selected\"} ${\r\n            isRed && \"infoBox--red\"\r\n            }`}\r\n            onClick={onClick}>\r\n            <CardContent>\r\n                {/* Title of info box */}\r\n                <Typography className='infoBox__title' color='textSecondary'>\r\n                    {title}\r\n                </Typography>\r\n\r\n                {/* Number of Cases */}\r\n                <h2 className={`infoBox__cases ${!isRed && 'infoBox--green'}`}>\r\n                    {prettyPrint(cases)}\r\n                </h2>\r\n\r\n                {/* Total  */}\r\n                <Typography className='infoBox__total' color='textSecondary'>\r\n                    {prettyPrint(total)} Total\r\n                 </Typography>\r\n\r\n            </CardContent>\r\n        </Card >\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet'\r\nimport './Map.css'\r\nimport { drawCircles } from '../../utils/utils'\r\n\r\nfunction Map({ mapCountries, casesType, center, zoom }) {\r\n    return (\r\n        <div className='map'>\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                {/* World Map display */}\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\";>OpenStreetMap</a> contributors' />\r\n                {/* draw circles on the map */}\r\n                {drawCircles(mapCountries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className='table'>\r\n            <table>\r\n                <tbody>\r\n                    {countries.map(({ country, cases }, index) => (\r\n                        <tr key={index}>\r\n                            <td>{country}</td>\r\n                            <td><strong>{numeral(cases).format('0,0')}</strong></td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;","import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\n\r\n//provided by char.js [refer documentation]\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\n//get the x and y values from queried data to form the graph\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n    let chartData = [];\r\n    let lastDatapoint;\r\n    for (let date in data.cases) {\r\n        if (lastDatapoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDatapoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDatapoint = data[casesType][date];\r\n    };\r\n    return chartData;\r\n}\r\n\r\nfunction LineGraph({casesType, className}) {\r\n    const [graphData, setGraphData] = useState({});\r\n\r\n    //query to fetch last 120 days data to plot the graph\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then(response => response.json())\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setGraphData(chartData);\r\n                });\r\n        };\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={className}>\r\n            {/* optional chaining syntax \"graphData?.\" refer doc \r\n            (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) */}\r\n            {graphData?.length > 0 && ( \r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: graphData,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {\n  MenuItem,\n  Select,\n  Card,\n  CardContent,\n  FormControl,\n} from '@material-ui/core'\nimport InfoBox from './Components/InfoBox/InfoBox'\nimport Map from './Components/Map/Map'\nimport Table from './Components/Table/Table'\nimport { sortedData } from './utils/utils'\nimport LineGraph from './Components/LineGraph/LineGraph'\nimport 'leaflet/dist/leaflet.css'\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);  //fetching all countries data\n  const [country, setCountry] = useState('worldwide'); //single country data\n  const [countryInfo, setCountryInfo] = useState({}); // individual country cases,deaths and recovered\n  const [tableData, setTableData] = useState([]); //To populate the right table containing country and their cases\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 }); // setting inital load position of map\n  const [mapZoom, setMapZoom] = useState(2); // setting zoom level of the map\n  const [mapCountries, setMapCountries] = useState([]); //get all data form countries to draw circle in map\n  const [casesType, setCasesType] = useState('cases') //tracking click of infoboxes to deaths or cases or recovered\n\n  //UseEffect to fetch worldwide data when the screen loads initially\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  //UseEffect to fetch courties data from \"disease.sh\"\n  useEffect(() => {\n    //async call to fetch data\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countriesData = data.map((country) => (\n            {\n              //_id : country.countryInfo._id, //unique id for each country\n              name: country.country, //india,japan etc..\n              value: country.countryInfo.iso3, //IND,JPN etc..\n            }\n          ));\n          const sortData = sortedData(data); //sorting data based on cases\n          setTableData(sortData);\n          setCountries(countriesData);\n          setMapCountries(data);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    // fetch data for the specific country\n    // if country == worldwide -> url = 'https://disease.sh/v3/covid-19/countries/all'\n    // if country == [any country] -> url = 'https://disease.sh/v3/covid-19/countries/[countrycode]'\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;  //back ticks are special jsx that helps us concatenate strings together\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data); //whole country data about covid-19 of selected country is saved as json\n        setCountry(countryCode); //set value to the clicked country\n        if (countryCode === 'worldwide') {\n          setMapCenter([34.80746, -40.4796]); //worldwide latlng position\n          setMapZoom(2);\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]) //setting map positon to selected country\n          setMapZoom(4);\n        }\n      });\n  }\n\n  return (\n    <div className=\"app\">\n      <div className='app__left'>\n        <div className='app__header'>\n          {/* Header */}\n          <h1>COVID-19 Tracker</h1>\n          {/* Countries Dropdown */}\n          <FormControl className='app__dropdown'>\n            <Select variant='outlined' onChange={onCountryChange} value={country}>\n              {/* populate countries here through map */}\n              <MenuItem value='worldwide'>WorldWide</MenuItem>\n              {countries.map((country, index) => <MenuItem key={index} value={country.value}>{country.name}</MenuItem>)}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* Infoboxes * 3 */}\n        <div className='app__stats'>\n          <InfoBox title='Coronavirus Cases'\n            isRed\n            active={casesType === 'cases'}\n            onClick={e => setCasesType('cases')}\n            cases={countryInfo.todayCases}\n            total={countryInfo.cases} />\n\n          <InfoBox title='Recovered'\n            active={casesType === 'recovered'}\n            onClick={e => setCasesType('recovered')}\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered} />\n\n          <InfoBox title='Deaths'\n            isRed\n            active={casesType === 'deaths'}\n            onClick={e => setCasesType('deaths')}\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths} />\n        </div>\n\n        {/* Map */}\n        <Map mapCountries={mapCountries} casesType={casesType} center={mapCenter} zoom={mapZoom} />\n      </div>\n      {/* Tabel to list country and cases */}\n      <Card className='app__right'>\n        <CardContent>\n          <div className='app__information'>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3 className='app__graphTitle'>Worldwide new cases</h3>\n            <LineGraph className='app__graph' casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}